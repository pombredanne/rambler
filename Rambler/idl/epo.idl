#ifndef _EPO_IDL_
#define _EPO_IDL_



module epo {
  typedef string octetKey; 

  typedef sequence<string,2> KeyValue;
  typedef sequence<KeyValue> KeyValues;

  /* This is for transporting errors to a client, all methods should
   be defined as throwing this exception. To throw this exception from
   your code, don't use the corba version, use one of the ErrorFactory
   methods.
  
   When thrown, the Corba Bridged will convert it to this corba type
   for you.
  */

  exception ciError {
    string domain;
    unsigned short errorcode;
    KeyValues userInfo;
  };
  


  /* In the future Rambler might send the following types as a struct
     or ValuTypes, in other words date might be declared as this

   struct date{
     int year;
     int month;
     int day;
   }
   
   but for now we're just encoding these values to strings and making the client 
   decode them on their side so a date is sent over as 'MM/DD/YYYY'
  */

  typedef string date;
  typedef string datetime;
  typedef string phone;
  typedef string time;
  typedef string timedelta; //This is a duration like 1h 30m


  // DEPRECATED; Don't use this structure, use the QueryService instead
  struct EntityInfo{
    string homeId;
    string entityName;
    string primaryKey;
  };

};

#include "EPOHome.idl"
#include "Entity.idl"
#include "ciIIdentityManager.idl"
#include "Recordset.idl"
#include "Money.idl"
#include "ProfileService.idl"
#include "ciIDebugService.idl"
#include "ciIApplication.idl"
#include "ciIAppManager.idl"

#endif
