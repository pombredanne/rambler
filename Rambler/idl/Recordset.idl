#ifndef _RECORDSET_IDL_
#define _RECORDSET_IDL_

#include "epo.idl"

/* Based on the dynamic recordset by Scott, prototypes/dyn.idl */

module epo {
  exception StopIteration {};

  /* TODO: Replace QueryError's in favor of ciErrors produced by the
     ErrorFactory */

  exception QueryError {string details;};


  typedef sequence<EntityInfo> EntityInfos;

    interface Table {
        /* 
        To be consistent with DB API provide a fetch one and fetch all
        prarmeters, which essentially return the Rows for each table
        */
        any fetchOne();
        any fetchMany(in unsigned short num);
        boolean hasMoreElements();
    };
    
    interface Recordset {
      typedef sequence<string> TableNames;
      typedef any Rows;
      void addTable(in Table in_table);
      TableNames getTableNames();

      any fetchOne(in string tableName) 
	raises (StopIteration);

      Rows fetchMany(in string tableName, in unsigned short num) 
	raises (StopIteration);

      boolean hasMoreElements(in string tableName);

      unsigned short getCount(in string tableName);

    };

  interface QueryHome {
    /* Query home for accessing querys over CORBA */
    typedef sequence<octet> Pickle;
    typedef sequence<string> Keys;
    
    Recordset query(in Pickle args) 
      raises (QueryError, ciError);

    string create(in string entityName, in KeyValues attributes)
      raises (QueryError, ciError);

    unsigned long execute(in string statement)
      raises (QueryError, ciError);

    /* Should we depricate these methods? -- Scott */
    Recordset query_metadata(in Pickle args) 
      raises (QueryError);

    Keys query_keys(in Pickle args) 
      raises (QueryError);
  };

  interface ReportHome {
    /* Session home for accessing reports. */
    typedef sequence<string> ReportNames;
    typedef sequence<octet> Pickle;
    ReportNames getReports();
    Recordset runReportString(in string reportNameString);
    Recordset runReport(in string reportName, in Pickle args);
    
  };

};

#endif
